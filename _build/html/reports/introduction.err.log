Traceback (most recent call last):
  File "/opt/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/opt/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/miniconda3/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/opt/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/opt/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
import numpy as np # Optional: for generating sample data easily

# --- 1. Create Sample Data ---
# Simple X and Y values
x_data = [1, 2, 3, 4, 5]
y_data = [2, 4, 1, 3, 5]

# Or, using NumPy for more complex data (e.g., a sine wave)
# x_data_np = np.linspace(0, 10, 100)  # 100 points from 0 to 10
# y_data_np = np.sin(x_data_np)

# --- 2. Create the Plot ---
plt.figure(figsize=(8, 5)) # Optional: to set the figure size

# Plotting the simple X and Y values
plt.plot(x_data, y_data, marker='o', linestyle='-', color='b', label='My Data')

# If using the NumPy data, uncomment the line below:
# plt.plot(x_data_np, y_data_np, linestyle='--', color='r', label='Sine Wave')

# --- 3. Add Labels and Title (Good Practice) ---
plt.title('Quick Plot Test')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')
plt.legend() # Displays the label defined in plt.plot()
plt.grid(True) # Optional: adds a grid

# --- 4. Show the Plot ---
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mmatplotlib[39;00m[34;01m.[39;00m[34;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mplt[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m [38;5;66;03m# Optional: for generating sample data easily[39;00m
[32m      4[39m [38;5;66;03m# --- 1. Create Sample Data ---[39;00m
[32m      5[39m [38;5;66;03m# Simple X and Y values[39;00m

[31mModuleNotFoundError[39m: No module named 'matplotlib'

